# Generated by Django 2.1.7 on 2020-11-25 15:35

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ApiGroupLevelFirst',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='接口一级分组名称')),
            ],
            options={
                'verbose_name': '接口分组',
                'verbose_name_plural': '接口分组',
                'db_table': 'ApiGroupLevelFirst',
            },
        ),
        migrations.CreateModel(
            name='ApiHead',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=1024, verbose_name='标签')),
                ('value', models.CharField(blank=True, max_length=1024, null=True, verbose_name='内容')),
            ],
            options={
                'verbose_name': '请求头',
                'verbose_name_plural': '请求头管理',
                'db_table': 'ApiHead',
            },
        ),
        migrations.CreateModel(
            name='ApiInfo',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='接口名称')),
                ('httpType', models.CharField(choices=[('HTTP', 'HTTP'), ('HTTPS', 'HTTPS')], default='HTTP', max_length=50, verbose_name='http/https')),
                ('requestType', models.CharField(choices=[('POST', 'POST'), ('GET', 'GET'), ('PUT', 'PUT'), ('DELETE', 'DELETE')], max_length=50, verbose_name='请求方式')),
                ('apiAddress', models.CharField(max_length=1024, verbose_name='接口地址')),
                ('requestParameterType', models.CharField(choices=[('form-data', '表单(form-data)'), ('raw', '源数据(raw)'), ('Restful', 'Restful')], max_length=50, verbose_name='请求参数格式')),
                ('status', models.BooleanField(default=True, verbose_name='状态')),
                ('mockStatus', models.BooleanField(default=False, verbose_name='mock状态')),
                ('mockCode', models.CharField(blank=True, choices=[('200', '200'), ('404', '404'), ('400', '400'), ('502', '502'), ('500', '500'), ('302', '302')], max_length=50, null=True, verbose_name='HTTP状态')),
                ('data', models.TextField(blank=True, null=True, verbose_name='mock内容')),
                ('lastUpdateTime', models.DateTimeField(auto_now=True, verbose_name='最近更新')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('apiGroupLevelFirst', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='First', to='TestPlatform.ApiGroupLevelFirst', verbose_name='所属一级分组')),
            ],
            options={
                'verbose_name': '接口',
                'verbose_name_plural': '接口管理',
                'db_table': 'ApiInfo',
            },
        ),
        migrations.CreateModel(
            name='ApiOperationHistory',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('time', models.DateTimeField(auto_now_add=True, verbose_name='操作时间')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='操作内容')),
                ('api', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TestPlatform.ApiInfo', verbose_name='接口')),
                ('user', models.ForeignKey(max_length=50, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='用户姓名')),
            ],
            options={
                'verbose_name': '接口操作历史',
                'verbose_name_plural': '接口操作历史',
                'db_table': 'ApiOperationHistory',
            },
        ),
        migrations.CreateModel(
            name='ApiParameter',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=1024, verbose_name='参数名')),
                ('_type', models.CharField(choices=[('Int', 'Int'), ('String', 'String')], default='String', max_length=1024, verbose_name='参数类型')),
                ('value', models.CharField(blank=True, max_length=1024, null=True, verbose_name='参数值')),
                ('required', models.BooleanField(default=True, verbose_name='是否必填')),
                ('restrict', models.CharField(blank=True, max_length=1024, null=True, verbose_name='输入限制')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('api', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requestParameter', to='TestPlatform.ApiInfo', verbose_name='所属接口')),
            ],
            options={
                'verbose_name': '请求参数',
                'verbose_name_plural': '请求参数管理',
                'db_table': 'ApiParameter',
            },
        ),
        migrations.CreateModel(
            name='ApiParameterRaw',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('data', models.TextField(blank=True, null=True, verbose_name='内容')),
                ('api', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='requestParameterRaw', to='TestPlatform.ApiInfo', verbose_name='所属接口')),
            ],
            options={
                'verbose_name': '请求参数Raw',
                'db_table': 'ApiParameterRaw',
            },
        ),
        migrations.CreateModel(
            name='APIRequestHistory',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('requestTime', models.DateTimeField(auto_now_add=True, verbose_name='请求时间')),
                ('requestType', models.CharField(max_length=50, verbose_name='请求方法')),
                ('requestAddress', models.CharField(max_length=1024, verbose_name='请求地址')),
                ('httpCode', models.CharField(max_length=50, verbose_name='HTTP状态')),
                ('api', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TestPlatform.ApiInfo', verbose_name='接口')),
            ],
            options={
                'verbose_name': '接口请求历史',
                'verbose_name_plural': '接口请求历史',
                'db_table': 'APIRequestHistory',
            },
        ),
        migrations.CreateModel(
            name='ApiResponse',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=1024, verbose_name='参数名')),
                ('_type', models.CharField(choices=[('Int', 'Int'), ('String', 'String')], default='String', max_length=1024, verbose_name='参数类型')),
                ('value', models.CharField(blank=True, max_length=1024, null=True, verbose_name='参数值')),
                ('required', models.BooleanField(default=True, verbose_name='是否必含')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('api', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='response', to='TestPlatform.ApiInfo', verbose_name='所属接口')),
            ],
            options={
                'verbose_name': '返回参数',
                'verbose_name_plural': '返回参数管理',
                'db_table': 'ApiResponse',
            },
        ),
        migrations.CreateModel(
            name='AutomationCaseApi',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='接口名称')),
                ('httpType', models.CharField(choices=[('HTTP', 'HTTP'), ('HTTPS', 'HTTPS')], default='HTTP', max_length=50, verbose_name='HTTP/HTTPS')),
                ('requestType', models.CharField(choices=[('POST', 'POST'), ('GET', 'GET'), ('PUT', 'PUT'), ('DELETE', 'DELETE')], max_length=50, verbose_name='请求方式')),
                ('apiAddress', models.CharField(max_length=1024, verbose_name='接口地址')),
                ('requestParameterType', models.CharField(choices=[('form-data', '表单(form-data)'), ('raw', '源数据(raw)'), ('Restful', 'Restful')], max_length=50, verbose_name='参数请求格式')),
                ('formatRaw', models.BooleanField(default=False, verbose_name='是否转换成源数据')),
                ('examineType', models.CharField(choices=[('no_check', '不校验'), ('only_check_status', '校验http状态'), ('json', 'JSON校验'), ('entirely_check', '完全校验'), ('Regular_check', '正则校验')], default='no_check', max_length=50, verbose_name='校验方式')),
                ('httpCode', models.CharField(blank=True, choices=[('200', '200'), ('404', '404'), ('400', '400'), ('502', '502'), ('500', '500'), ('302', '302')], max_length=50, null=True, verbose_name='HTTP状态')),
                ('responseData', models.TextField(blank=True, null=True, verbose_name='返回内容')),
            ],
            options={
                'verbose_name': '用例接口',
                'verbose_name_plural': '用例接口管理',
                'db_table': 'AutomationCaseApi',
            },
        ),
        migrations.CreateModel(
            name='AutomationCaseTestResult',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('header', models.CharField(blank=True, max_length=1024, null=True, verbose_name='请求头')),
                ('parameter', models.TextField(blank=True, null=True, verbose_name='请求参数')),
                ('result', models.CharField(choices=[('PASS', '成功'), ('FAIL', '失败')], max_length=50, verbose_name='测试结果')),
                ('httpStatus', models.CharField(blank=True, choices=[('200', '200'), ('404', '404'), ('400', '400'), ('502', '502'), ('500', '500'), ('302', '302')], max_length=50, null=True, verbose_name='http状态')),
                ('responseHeader', models.TextField(blank=True, null=True, verbose_name='返回头')),
                ('responseData', models.TextField(blank=True, null=True, verbose_name='实际返回内容')),
                ('testTime', models.CharField(blank=True, max_length=128, null=True, verbose_name='测试时间')),
                ('automationCaseApi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='auto_result', to='TestPlatform.AutomationCaseApi', verbose_name='接口')),
            ],
            options={
                'verbose_name': '自动测试结果',
                'verbose_name_plural': '自动测试结果管理',
                'db_table': 'AutomationCaseTestResult',
            },
        ),
        migrations.CreateModel(
            name='AutomationGroupLevelFirst',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='用例一级分组')),
            ],
            options={
                'verbose_name': '用例分组',
                'verbose_name_plural': '用例分组管理',
                'db_table': 'AutomationGroupLevelFirst',
            },
        ),
        migrations.CreateModel(
            name='AutomationHead',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=1024, verbose_name='参数名')),
                ('value', models.CharField(max_length=1024, verbose_name='内容')),
                ('interrelate', models.BooleanField(default=False, verbose_name='是否关联')),
                ('automationCaseApi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='header', to='TestPlatform.AutomationCaseApi', verbose_name='接口')),
            ],
            options={
                'verbose_name': '请求头',
                'verbose_name_plural': '请求头管理',
                'db_table': 'AutomationHead',
            },
        ),
        migrations.CreateModel(
            name='AutomationParameter',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=1024, verbose_name='参数名')),
                ('value', models.CharField(blank=True, max_length=1024, null=True, verbose_name='内容')),
                ('interrelate', models.BooleanField(default=False, verbose_name='是否关联')),
                ('automationCaseApi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parameterList', to='TestPlatform.AutomationCaseApi', verbose_name='接口')),
            ],
            options={
                'verbose_name': '接口参数',
                'verbose_name_plural': '接口参数管理',
                'db_table': 'AutomationParameter',
            },
        ),
        migrations.CreateModel(
            name='AutomationParameterRaw',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('data', models.TextField(blank=True, null=True, verbose_name='源数据请求参数')),
                ('automationCaseApi', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='parameterRaw', to='TestPlatform.AutomationCaseApi', verbose_name='接口')),
            ],
            options={
                'verbose_name': '源数据参数',
                'verbose_name_plural': '源数据参数管理',
                'db_table': 'AutomationParameterRaw',
            },
        ),
        migrations.CreateModel(
            name='AutomationReportSendConfig',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('reportFrom', models.EmailField(blank=True, max_length=1024, null=True, verbose_name='发送人邮箱')),
                ('mailUser', models.CharField(blank=True, max_length=1024, null=True, verbose_name='用户名')),
                ('mailPass', models.CharField(blank=True, max_length=1024, null=True, verbose_name='口令')),
                ('mailSmtp', models.CharField(blank=True, max_length=1024, null=True, verbose_name='邮箱服务器')),
            ],
            options={
                'verbose_name': '邮件发送配置',
                'verbose_name_plural': '邮件发送配置',
                'db_table': 'AutomationReportSendConfig',
            },
        ),
        migrations.CreateModel(
            name='AutomationResponseJson',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=1024, null=True, verbose_name='JSON参数')),
                ('tier', models.CharField(blank=True, max_length=1024, null=True, verbose_name='层级关系')),
                ('type', models.CharField(choices=[('json', 'json'), ('Regular', 'Regular')], default='json', max_length=1024, verbose_name='关联类型')),
                ('automationCaseApi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='response', to='TestPlatform.AutomationCaseApi', verbose_name='接口')),
            ],
            options={
                'verbose_name': '结果JSON参数',
                'verbose_name_plural': '结果JSON参数管理',
                'db_table': 'AutomationResponseJson',
            },
        ),
        migrations.CreateModel(
            name='AutomationTaskRunTime',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('startTime', models.CharField(max_length=50, verbose_name='开始时间')),
                ('host', models.CharField(blank=True, max_length=1024, null=True, verbose_name='测试地址')),
                ('elapsedTime', models.CharField(max_length=50, verbose_name='结束时间')),
            ],
            options={
                'verbose_name': '用例任务执行时间',
                'verbose_name_plural': '用例任务执行时间',
                'db_table': 'AutomationTaskRunTime',
            },
        ),
        migrations.CreateModel(
            name='AutomationTestCase',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('caseName', models.CharField(max_length=50, verbose_name='用例名称')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('updateTime', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('automationGroupLevelFirst', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='automationGroup', to='TestPlatform.AutomationGroupLevelFirst', verbose_name='所属用例一级分组')),
            ],
            options={
                'verbose_name': '自动化测试用例',
                'verbose_name_plural': '自动化测试用例',
                'db_table': 'AutomationTestCase',
            },
        ),
        migrations.CreateModel(
            name='AutomationTestResult',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('url', models.CharField(max_length=1024, verbose_name='请求地址')),
                ('requestType', models.CharField(choices=[('POST', 'POST'), ('GET', 'GET'), ('PUT', 'PUT'), ('DELETE', 'DELETE')], max_length=1024, verbose_name='请求方式')),
                ('host', models.CharField(blank=True, max_length=1024, null=True, verbose_name='测试地址')),
                ('header', models.CharField(blank=True, max_length=1024, null=True, verbose_name='请求头')),
                ('parameter', models.TextField(blank=True, null=True, verbose_name='请求参数')),
                ('statusCode', models.CharField(blank=True, choices=[('200', '200'), ('404', '404'), ('400', '400'), ('502', '502'), ('500', '500'), ('302', '302')], max_length=1024, null=True, verbose_name='期望HTTP状态')),
                ('examineType', models.CharField(max_length=1024, verbose_name='匹配规则')),
                ('data', models.TextField(blank=True, null=True, verbose_name='规则内容')),
                ('result', models.CharField(choices=[('PASS', '成功'), ('FAIL', '失败')], max_length=50, verbose_name='测试结果')),
                ('httpStatus', models.CharField(blank=True, choices=[('200', '200'), ('404', '404'), ('400', '400'), ('502', '502'), ('500', '500'), ('302', '302')], max_length=50, null=True, verbose_name='http状态')),
                ('responseData', models.TextField(blank=True, null=True, verbose_name='实际返回内容')),
                ('testTime', models.DateTimeField(auto_now_add=True, verbose_name='测试时间')),
                ('automationCaseApi', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='test_result', to='TestPlatform.AutomationCaseApi', verbose_name='接口')),
            ],
            options={
                'verbose_name': '手动测试结果',
                'verbose_name_plural': '手动测试结果管理',
                'db_table': 'AutomationTestResult',
            },
        ),
        migrations.CreateModel(
            name='AutomationTestTask',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='任务名称')),
                ('type', models.CharField(choices=[('circulation', '循环'), ('timing', '定时')], max_length=50, verbose_name='类型')),
                ('frequency', models.IntegerField(blank=True, null=True, verbose_name='间隔')),
                ('unit', models.CharField(blank=True, choices=[('m', '分'), ('h', '时'), ('d', '天'), ('w', '周')], max_length=50, null=True, verbose_name='单位')),
                ('startTime', models.DateTimeField(max_length=50, verbose_name='开始时间')),
                ('endTime', models.DateTimeField(max_length=50, verbose_name='结束时间')),
            ],
            options={
                'verbose_name': '用例定时任务',
                'verbose_name_plural': '用例定时任务管理',
                'db_table': 'AutomationTestTask',
            },
        ),
        migrations.CreateModel(
            name='base_data',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('content', models.CharField(blank=True, max_length=500, null=True, verbose_name='内容')),
                ('type', models.CharField(blank=True, max_length=10, null=True, verbose_name='类型')),
                ('select_type', models.CharField(blank=True, max_length=20, null=True, verbose_name='查询类型')),
                ('remarks', models.CharField(blank=True, max_length=100, null=True, verbose_name='备注')),
                ('other', models.CharField(blank=True, max_length=10, null=True, verbose_name='其他')),
                ('status', models.CharField(blank=True, max_length=1, null=True, verbose_name='0是关闭，1是启用')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '基础数据表',
                'verbose_name_plural': '基础数据表',
                'db_table': 'base_data',
            },
        ),
        migrations.CreateModel(
            name='CustomMethod',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='方法名')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('type', models.CharField(max_length=50, verbose_name='类型')),
                ('dataCode', models.TextField(verbose_name='代码')),
                ('status', models.BooleanField(default=True, verbose_name='状态')),
            ],
            options={
                'verbose_name': '自定义方法',
                'verbose_name_plural': '自定义方法',
                'db_table': 'CustomMethod',
            },
        ),
        migrations.CreateModel(
            name='dicom',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('patientid', models.CharField(blank=True, max_length=50, null=True, verbose_name='patientid')),
                ('studyinstanceuid', models.CharField(blank=True, max_length=120, null=True, verbose_name='数据uid')),
                ('diseases', models.CharField(blank=True, max_length=20, null=True, verbose_name='预测类型')),
                ('slicenumber', models.CharField(blank=True, max_length=6, null=True, verbose_name='肺炎层厚')),
                ('imagecount', models.CharField(blank=True, max_length=5, null=True, verbose_name='张数')),
                ('vote', models.CharField(blank=True, max_length=800, null=True, verbose_name='挂载')),
                ('predictor', models.CharField(blank=True, max_length=40, null=True, verbose_name='预测类型')),
                ('diagnosis', models.CharField(blank=True, max_length=200, null=True, verbose_name='诊断结果')),
                ('server', models.CharField(blank=True, max_length=20, null=True, verbose_name='服务')),
                ('type', models.CharField(blank=True, max_length=10, null=True, verbose_name='类型')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': 'dicom数据表',
                'verbose_name_plural': 'dicom数据表',
                'db_table': 'dicom',
            },
        ),
        migrations.CreateModel(
            name='dicom_record',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('version', models.CharField(blank=True, max_length=10, null=True, verbose_name='版本')),
                ('patientid', models.CharField(blank=True, max_length=30, null=True, verbose_name='id')),
                ('studyinstanceuid', models.CharField(blank=True, max_length=150, null=True, verbose_name='数据uid')),
                ('diseases', models.CharField(blank=True, max_length=20, null=True, verbose_name='病种')),
                ('slicenumber', models.CharField(blank=True, max_length=20, null=True, verbose_name='slicenumber')),
                ('aistatus', models.CharField(blank=True, max_length=5, null=True, verbose_name='预测结果')),
                ('aidiagnosis', models.CharField(blank=True, max_length=100, null=True, verbose_name='ai诊断结果')),
                ('diagnosis', models.CharField(blank=True, max_length=100, null=True, verbose_name='诊断结果')),
                ('starttime', models.CharField(blank=True, max_length=20, null=True, verbose_name='开始预测时间')),
                ('completiontime', models.CharField(blank=True, max_length=20, null=True, verbose_name='结束预测时间')),
                ('report', models.TextField(blank=True, max_length=100, null=True, verbose_name='诊断报告')),
                ('type', models.TextField(blank=True, max_length=10, null=True, verbose_name='诊断报告')),
                ('status', models.BooleanField(default=False, verbose_name='状态')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '测试记录表',
                'verbose_name_plural': '测试记录表',
                'db_table': 'dicom_record',
            },
        ),
        migrations.CreateModel(
            name='dicom_route',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('dicomid', models.CharField(blank=True, max_length=10, null=True, verbose_name='关联dicom')),
                ('route', models.CharField(blank=True, max_length=100, null=True, verbose_name='路径')),
            ],
            options={
                'verbose_name': 'dicom路径',
                'verbose_name_plural': 'dicom路径',
                'db_table': 'dicomroute',
            },
        ),
        migrations.CreateModel(
            name='duration',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('server', models.CharField(blank=True, max_length=20, null=True, verbose_name='服务器ip')),
                ('port', models.CharField(blank=True, max_length=5, null=True, verbose_name='服务器端口号')),
                ('aet', models.CharField(blank=True, max_length=10, null=True, verbose_name='aet')),
                ('keyword', models.CharField(blank=True, max_length=20, null=True, verbose_name='匿名名称')),
                ('dicom', models.CharField(blank=True, max_length=100, null=True, verbose_name='dicom数据')),
                ('sendcount', models.IntegerField(blank=True, null=True, verbose_name='共计发送')),
                ('end_time', models.CharField(blank=True, max_length=20, null=True, verbose_name='结束时间')),
                ('sleepcount', models.CharField(blank=True, max_length=20, null=True, verbose_name='睡眠张数')),
                ('sleeptime', models.CharField(blank=True, max_length=20, null=True, verbose_name='睡眠时间')),
                ('series', models.CharField(blank=True, max_length=5, null=True, verbose_name='series')),
                ('sendstatus', models.BooleanField(default=True, verbose_name='发送状态')),
                ('status', models.BooleanField(default=False, verbose_name='状态')),
                ('dds', models.CharField(blank=True, max_length=20, null=True, verbose_name='dds 服务')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '持续化配置',
                'verbose_name_plural': '持续化配置',
                'db_table': 'duration',
            },
        ),
        migrations.CreateModel(
            name='duration_record',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('patientid', models.CharField(blank=True, max_length=80, null=True, verbose_name='patientid')),
                ('accessionnumber', models.CharField(blank=True, max_length=80, null=True, verbose_name='accessionnumber')),
                ('studyinstanceuid', models.CharField(blank=True, max_length=200, null=True, verbose_name='数据uid')),
                ('studyolduid', models.CharField(blank=True, max_length=200, null=True, verbose_name='影像张数验证')),
                ('imagecount', models.CharField(blank=True, max_length=50, null=True, verbose_name='发送影像张数')),
                ('imagecount_server', models.CharField(blank=True, max_length=50, null=True, verbose_name='接收影像张数')),
                ('aistatus', models.CharField(blank=True, max_length=10, null=True, verbose_name='AI预测结果')),
                ('diagnosis', models.CharField(blank=True, max_length=200, null=True, verbose_name='诊断结果')),
                ('sendserver', models.CharField(blank=True, max_length=20, null=True, verbose_name='发送服务')),
                ('sendtime', models.CharField(blank=True, max_length=20, null=True, verbose_name='发送时间')),
                ('duration_id', models.CharField(blank=True, max_length=20, null=True, verbose_name='关联持续id')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '持续化测试记录表',
                'verbose_name_plural': '持续化测试记录表',
                'db_table': 'duration_record',
            },
        ),
        migrations.CreateModel(
            name='GlobalHost',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='名称')),
                ('host', models.CharField(max_length=50, verbose_name='Host地址')),
                ('port', models.CharField(max_length=10, verbose_name='port')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('status', models.BooleanField(default=True, verbose_name='状态')),
            ],
            options={
                'verbose_name': 'HOST',
                'verbose_name_plural': 'HOST管理',
                'db_table': 'GlobalHost',
            },
        ),
        migrations.CreateModel(
            name='pid',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('pid', models.IntegerField(blank=True, null=True, verbose_name='进程号')),
                ('durationid', models.CharField(blank=True, max_length=5, null=True, verbose_name='持续化id')),
            ],
            options={
                'verbose_name': 'pid表',
                'verbose_name_plural': 'pid表',
                'db_table': 'pid',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='项目名称')),
                ('version', models.CharField(blank=True, max_length=20, null=True, verbose_name='版本')),
                ('type', models.CharField(choices=[('Web', 'Web'), ('App', 'App')], max_length=50, verbose_name='类型')),
                ('status', models.BooleanField(default=True, verbose_name='状态')),
                ('start_date', models.DateTimeField(blank=True, null=True, verbose_name='项目开始时间')),
                ('api_date', models.DateTimeField(blank=True, null=True, verbose_name='接口提测时间')),
                ('app_date', models.DateTimeField(blank=True, null=True, verbose_name='app提测时间')),
                ('api_online_date', models.DateTimeField(blank=True, null=True, verbose_name='接口上线时间')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='发布日期')),
                ('client', models.CharField(blank=True, max_length=2, null=True, verbose_name='0 是安卓 1是ios  2 是all')),
                ('projectstatus', models.CharField(default='未開始', max_length=10, verbose_name='项目状态')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('LastUpdateTime', models.DateTimeField(auto_now=True, verbose_name='最近修改时间')),
                ('createTime', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('user', models.ForeignKey(max_length=1024, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
            ],
            options={
                'verbose_name': '项目',
                'verbose_name_plural': '项目',
                'db_table': 'Project',
            },
        ),
        migrations.CreateModel(
            name='ProjectDynamic',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('time', models.DateTimeField(max_length=128, verbose_name='操作时间')),
                ('type', models.CharField(max_length=50, verbose_name='操作类型')),
                ('operationObject', models.CharField(max_length=50, verbose_name='操作对象')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dynamic_project', to='TestPlatform.Project', verbose_name='所属项目')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='userName', to=settings.AUTH_USER_MODEL, verbose_name='操作人')),
            ],
            options={
                'verbose_name': '项目动态',
                'verbose_name_plural': '项目动态',
                'db_table': 'ProjectDynamic',
            },
        ),
        migrations.CreateModel(
            name='ProjectMember',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('permissionType', models.CharField(choices=[('超级管理员', '超级管理员'), ('开发人员', '开发人员'), ('测试人员', '测试人员')], max_length=50, verbose_name='权限角色')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='member_project', to='TestPlatform.Project', verbose_name='所属项目')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='member_user', to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '项目成员',
                'verbose_name_plural': '项目成员',
                'db_table': 'ProjectMember',
            },
        ),
        migrations.CreateModel(
            name='stress_record',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('projectname', models.CharField(blank=True, max_length=20, null=True, verbose_name='项目名称')),
                ('version', models.CharField(blank=True, max_length=20, null=True, verbose_name='测试版本')),
                ('loadserver', models.CharField(blank=True, max_length=40, null=True, verbose_name='测试环境')),
                ('dicomdata', models.CharField(blank=True, max_length=400, null=True, verbose_name='测试数据')),
                ('thread', models.CharField(blank=True, max_length=4, null=True, verbose_name='线程数')),
                ('synchroniz', models.CharField(blank=True, max_length=4, null=True, verbose_name='并发vu')),
                ('ramp', models.CharField(blank=True, max_length=4, null=True, verbose_name='ramp up time')),
                ('loop_count', models.CharField(blank=True, max_length=4, null=True, verbose_name='循环次数')),
                ('duration', models.CharField(blank=True, max_length=4, null=True, verbose_name='持续时间')),
                ('start_delay', models.CharField(blank=True, max_length=4, null=True, verbose_name='启动延时 秒')),
                ('dicom_send', models.CharField(blank=True, max_length=4, null=True, verbose_name='dicom 发送')),
                ('start_date', models.CharField(blank=True, max_length=20, null=True, verbose_name='压测开始时间')),
                ('end_date', models.CharField(blank=True, max_length=20, null=True, verbose_name='压测结束时间')),
                ('loop_time', models.CharField(blank=True, max_length=10, null=True, verbose_name='执行时间')),
                ('status', models.BooleanField(default=True, verbose_name='状态')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '性能测试记录表',
                'verbose_name_plural': '性能测试记录表',
                'db_table': 'stress_record',
            },
        ),
        migrations.CreateModel(
            name='stress_result',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('version', models.CharField(blank=True, max_length=10, null=True, verbose_name='版本')),
                ('modelname', models.CharField(blank=True, max_length=30, null=True, verbose_name='模型')),
                ('type', models.CharField(blank=True, max_length=15, null=True, verbose_name='结果类型')),
                ('slicenumber', models.CharField(blank=True, max_length=6, null=True, verbose_name='层厚')),
                ('count', models.IntegerField(blank=True, null=True, verbose_name='次数')),
                ('avg', models.CharField(blank=True, max_length=10, null=True, verbose_name='平均值')),
                ('single', models.CharField(blank=True, max_length=10, null=True, verbose_name='单任务')),
                ('median', models.CharField(blank=True, max_length=10, null=True, verbose_name='中间值')),
                ('min', models.CharField(blank=True, max_length=10, null=True, verbose_name='最小时间')),
                ('max', models.CharField(blank=True, max_length=10, null=True, verbose_name='最大时间')),
                ('coef', models.CharField(blank=True, max_length=10, null=True, verbose_name='系数')),
                ('rate', models.TextField(blank=True, max_length=10, null=True, verbose_name='预测成功率')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '压测结果记录表',
                'verbose_name_plural': '压测结果记录表',
                'db_table': 'stress_result',
            },
        ),
        migrations.CreateModel(
            name='test_content',
            fields=[
                ('content_id', models.AutoField(primary_key=True, serialize=False)),
                ('project_content', models.CharField(blank=True, max_length=1000, null=True, verbose_name='项目内容')),
                ('product_content', models.CharField(blank=True, max_length=1000, null=True, verbose_name='需求内容')),
                ('case_content', models.CharField(blank=True, max_length=1000, null=True, verbose_name='case 内容')),
                ('bug_content', models.CharField(blank=True, max_length=500, null=True, verbose_name='bug 内容')),
                ('performance_content', models.CharField(blank=True, max_length=1000, null=True, verbose_name='性能内容')),
                ('report_id', models.IntegerField(blank=True, null=True, verbose_name='邮件id')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '邮件内容',
                'verbose_name_plural': '邮件内容',
                'db_table': 'test_content',
            },
        ),
        migrations.CreateModel(
            name='test_report',
            fields=[
                ('report_id', models.AutoField(primary_key=True, serialize=False)),
                ('test_version', models.CharField(blank=True, max_length=10, null=True, verbose_name='Boimind版本')),
                ('cns_version', models.CharField(blank=True, max_length=10, null=True, verbose_name='CoinNess版本')),
                ('type', models.IntegerField(blank=True, null=True, verbose_name='类型（1.每日报告 2.测试报告 3.质量报告）')),
                ('send_time', models.CharField(blank=True, max_length=5, null=True, verbose_name='发送时间')),
                ('title', models.CharField(blank=True, max_length=20, null=True, verbose_name='邮件标题')),
                ('receiver', models.CharField(blank=True, max_length=500, null=True, verbose_name='发送人员')),
                ('email_cc', models.CharField(blank=True, max_length=200, null=True, verbose_name='抄送人员')),
                ('content_id', models.CharField(blank=True, max_length=20, null=True, verbose_name='内容id')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '邮件报告',
                'verbose_name_plural': '邮件报告',
                'db_table': 'test_report',
            },
        ),
        migrations.CreateModel(
            name='test_risk',
            fields=[
                ('risk_id', models.AutoField(primary_key=True, serialize=False)),
                ('project_id', models.CharField(blank=True, max_length=10, null=True, verbose_name='项目ID')),
                ('risk', models.CharField(blank=True, max_length=100, null=True, verbose_name='风险内容')),
                ('development', models.CharField(blank=True, max_length=20, null=True, verbose_name='开发人员')),
                ('delay', models.CharField(blank=True, max_length=4, null=True, verbose_name='延期日期')),
                ('solution_status', models.CharField(blank=True, max_length=1, null=True, verbose_name='解决状态  0是未解决，1是解决')),
                ('status', models.CharField(blank=True, max_length=1, null=True, verbose_name='0是显示，1是不显示')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '测试风险点',
                'verbose_name_plural': '测试风险点',
                'db_table': 'test_risk',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(blank=True, default='', max_length=11, verbose_name='手机号')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user', to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
        ),
        migrations.CreateModel(
            name='VisitorsRecord',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('formattedAddress', models.CharField(blank=True, max_length=1024, null=True, verbose_name='访客地址')),
                ('country', models.CharField(blank=True, max_length=50, null=True, verbose_name='国家')),
                ('province', models.CharField(blank=True, max_length=50, null=True, verbose_name='省份')),
                ('city', models.CharField(blank=True, max_length=50, null=True, verbose_name='城市')),
                ('district', models.CharField(blank=True, max_length=50, null=True, verbose_name='县级')),
                ('township', models.CharField(blank=True, max_length=50, null=True, verbose_name='镇')),
                ('street', models.CharField(blank=True, max_length=50, null=True, verbose_name='街道')),
                ('number', models.CharField(blank=True, max_length=50, null=True, verbose_name='门牌号')),
                ('success', models.CharField(blank=True, max_length=50, null=True, verbose_name='成功')),
                ('reason', models.CharField(blank=True, max_length=1024, null=True, verbose_name='原因')),
                ('callTime', models.DateTimeField(auto_now_add=True, verbose_name='访问时间')),
            ],
            options={
                'verbose_name': '访客',
                'verbose_name_plural': '访客查看',
                'db_table': 'VisitorsRecord',
            },
        ),
        migrations.AddField(
            model_name='globalhost',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TestPlatform.Project', verbose_name='项目'),
        ),
        migrations.AddField(
            model_name='custommethod',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TestPlatform.Project', verbose_name='项目'),
        ),
        migrations.AddField(
            model_name='automationtesttask',
            name='Host',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TestPlatform.GlobalHost', verbose_name='HOST'),
        ),
        migrations.AddField(
            model_name='automationtesttask',
            name='project',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='TestPlatform.Project', verbose_name='项目'),
        ),
        migrations.AddField(
            model_name='automationtestcase',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TestPlatform.Project', verbose_name='所属项目'),
        ),
        migrations.AddField(
            model_name='automationtestcase',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createUser', to=settings.AUTH_USER_MODEL, verbose_name='创建人'),
        ),
        migrations.AddField(
            model_name='automationtaskruntime',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TestPlatform.Project', verbose_name='项目'),
        ),
        migrations.AddField(
            model_name='automationreportsendconfig',
            name='project',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='TestPlatform.Project', verbose_name='项目'),
        ),
        migrations.AddField(
            model_name='automationgrouplevelfirst',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TestPlatform.Project', verbose_name='项目'),
        ),
        migrations.AddField(
            model_name='automationcaseapi',
            name='automationTestCase',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='api', to='TestPlatform.AutomationTestCase', verbose_name='用例'),
        ),
        migrations.AddField(
            model_name='apiinfo',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='api_project', to='TestPlatform.Project', verbose_name='所属项目'),
        ),
        migrations.AddField(
            model_name='apiinfo',
            name='userUpdate',
            field=models.ForeignKey(max_length=50, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ApiUpdateUser', to=settings.AUTH_USER_MODEL, verbose_name='更新人'),
        ),
        migrations.AddField(
            model_name='apihead',
            name='api',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='headers', to='TestPlatform.ApiInfo', verbose_name='所属接口'),
        ),
        migrations.AddField(
            model_name='apigrouplevelfirst',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TestPlatform.Project', verbose_name='项目'),
        ),
    ]
